<% content_for :title, "Showing server rack" %>

<div class="w-full max-w-7xl mx-auto">
  <div id="notifications">
    <% if notice.present? %>
      <p class="py-2 px-3 bg-green-50 mb-5 text-green-500 font-medium rounded-md inline-block" id="notice"><%= notice %></p>
    <% end %>
  </div>
  
  <%# Container for drag-drop events - hidden %>
  <div id="drag-drop-events" style="display: none;"></div>

  <h1 class="font-bold text-4xl">Showing server rack</h1>

  <%= render @server_rack %>

  <%= link_to "Edit this server rack", edit_server_rack_path(@server_rack), class: "w-full sm:w-auto text-center rounded-md px-3.5 py-2.5 bg-blue-500 hover:bg-blue-600 inline-block font-medium text-white" %>
  <%= link_to "Back to server racks", server_racks_path, class: "w-full sm:w-auto text-center mt-2 sm:mt-0 sm:ml-2 rounded-md px-3.5 py-2.5 bg-gray-800 hover:bg-gray-700 inline-block font-medium text-white" %>
  <div class="sm:inline-block mt-2 sm:mt-0 sm:ml-2">
    <%= button_to "Destroy this server rack", @server_rack, method: :delete, class: "w-full rounded-md px-3.5 py-2.5 text-white bg-red-600 hover:bg-red-500 font-medium cursor-pointer", data: { turbo_confirm: "Are you sure?" } %>
  </div>

  <!-- Server Visualization (Centered) -->
  <div class="mt-8 flex justify-center">
    <div class="max-w-3xl w-full">
      <%= render "server_vizualization", server_rack: @server_rack %>
    </div>
  </div>
  
  <!-- Two-pane layout below visualization -->
  <div class="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6">
    <!-- Left pane: Components in this Rack -->
    <div>
      <h2 class="text-2xl font-bold mb-4">Components in this Rack</h2>
      <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
        <% 
          # Group by position to show components in order - defining this here because it's used in both
          # the list partial and in the add component form
          @rack_components_by_position = @server_rack.rack_components
            .includes(:component)
            .order(:position_y)
            .group_by(&:position_y)
        %>
        
        <%= render partial: "server_racks/rack_components_list", locals: { 
          server_rack: @server_rack, 
          rack_components_by_position: @rack_components_by_position 
        } %>
      </div>
    </div>
    
    <!-- Right pane: Add Components -->
    <div>
      <h2 class="text-2xl font-bold mb-4">Add Components</h2>
      <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
        <h3 class="text-xl font-semibold mb-2">Search Components</h3>
        
        <% if Component.any? %>
          <!-- Search input -->
          <div class="mb-4">
            <label for="component-search" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Search for a component
            </label>
            <div class="relative">
              <input type="text" id="component-search" 
                     placeholder="Type component name..." 
                     class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-gray-700 dark:text-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500">
              <div class="absolute inset-y-0 right-0 flex items-center pr-3">
                <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
              </div>
            </div>
          </div>
          
          <!-- Component selection -->
          <div class="mb-4" id="component-list">
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Select component
            </label>
            <div class="max-h-64 overflow-y-auto border border-gray-300 dark:border-gray-600 rounded-md">
              <ul class="divide-y divide-gray-300 dark:divide-gray-700">
                <% Component.all.each do |component| %>
                  <li class="component-item p-3 hover:bg-gray-50 dark:hover:bg-gray-800 cursor-pointer" 
                      data-name="<%= component.name.downcase %>"
                      data-id="<%= component.id %>"
                      data-height="<%= component.height %>"
                      data-depth="<%= component.depth %>"
                      onclick="selectComponent(this)">
                    <div class="flex items-center">
                      <% 
                        # Same color logic as in visualization
                        component_name = component.name.downcase
                        color_class = if component_name.include?('server')
                          "bg-blue-100 dark:bg-blue-900 border-blue-500"
                        elsif component_name.include?('network') || component_name.include?('switch') || component_name.include?('router')
                          "bg-green-100 dark:bg-green-900 border-green-500"
                        elsif component_name.include?('ups') || component_name.include?('power')
                          "bg-red-100 dark:bg-red-900 border-red-500"
                        elsif component_name.include?('storage') || component_name.include?('disk') || component_name.include?('nas')
                          "bg-yellow-100 dark:bg-yellow-900 border-yellow-500"
                        else
                          "bg-purple-100 dark:bg-purple-900 border-purple-500"
                        end
                      %>
                      <div class="h-6 w-6 rounded-full border <%= color_class %> mr-2"></div>
                      <div>
                        <h4 class="font-medium"><%= component.name %></h4>
                        <p class="text-sm text-gray-600 dark:text-gray-400">
                          <%= component.height %>U â€¢ <%= component.depth %> inches
                        </p>
                      </div>
                    </div>
                  </li>
                <% end %>
              </ul>
              
              <!-- No results message, hidden by default -->
              <div id="no-results-message" class="hidden text-center py-4 text-gray-500">
                No components match your search. <%= link_to "Create a new component", new_component_path, class: "text-blue-500 hover:underline" %>
              </div>
            </div>
          </div>
          
          <!-- Position selector and add button, hidden until component selected -->
          <div id="position-selector" class="hidden">
            <div class="bg-gray-50 dark:bg-gray-800 border border-gray-300 dark:border-gray-700 rounded-md p-3 mb-4">
              <div class="flex items-center mb-2">
                <div id="selected-component-color" class="h-5 w-5 rounded-full mr-2"></div>
                <h4 id="selected-component-name" class="font-medium"></h4>
              </div>
              <p id="selected-component-details" class="text-sm text-gray-600 dark:text-gray-400 mb-3"></p>
              
              <%= form_with url: server_rack_rack_components_path(@server_rack), method: :post, id: "add-component-form", class: "flex flex-col sm:flex-row sm:items-end gap-3" do |form| %>
                <%= form.hidden_field :component_id, id: "selected-component-id" %>
                
                <div class="sm:w-2/3">
                  <div id="position-status" class="text-xs mb-1"></div>
                  <%= form.label :position_y, "Position (U):", class: "block text-sm font-medium text-gray-700 dark:text-gray-300" %>
                  <div class="mt-1">
                    <!-- Position input with control buttons -->
                    <div class="relative border border-gray-300 dark:border-gray-600 rounded-lg overflow-hidden shadow-sm">
                      <!-- Main control container -->
                      <div class="flex h-14">
                        <!-- Decrement button -->
                        <button type="button" 
                                class="flex-none w-14 h-full flex items-center justify-center bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-200 border-r border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500 transition-colors"
                                onclick="adjustPosition(-1);">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M20 12H4" />
                          </svg>
                        </button>
                        
                        <!-- Position display -->
                        <div class="flex-grow relative bg-white dark:bg-gray-800">
                          <div class="absolute inset-0 flex flex-col items-center justify-center pointer-events-none">
                            <div class="text-center">
                              <span id="position-display" class="text-2xl font-bold text-gray-800 dark:text-gray-200 transition-colors">1</span>
                              <span class="ml-1 text-gray-500 dark:text-gray-400">U</span>
                            </div>
                            <span id="position-indicator" class="text-xs text-blue-500 mt-1 block text-center"></span>
                          </div>
                          <%= form.number_field :position_y, 
                              id: "position-input",
                              min: 1, 
                              max: @server_rack.height,
                              value: 1,
                              class: "sr-only",
                              onchange: "updatePositionDisplay(this.value); checkPositionAvailability();" %>
                        </div>
                        
                        <!-- Increment button -->
                        <button type="button" 
                                class="flex-none w-14 h-full flex items-center justify-center bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-200 border-l border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500 transition-colors"
                                onclick="adjustPosition(1);">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M12 6v12m6-6H6" />
                          </svg>
                        </button>
                      </div>
                      
                      <!-- Position status bar -->
                      <div class="h-2 bg-gray-200 dark:bg-gray-700">
                        <div id="available-positions-bar" class="h-full bg-blue-500 transition-all duration-300" style="width: 100%"></div>
                      </div>
                    </div>
                    
                    <script>
                      // Function to adjust position with buttons
                      function adjustPosition(delta) {
                        const input = document.getElementById('position-input');
                        const currentValue = parseInt(input.value) || 1;
                        const newValue = currentValue + delta;
                        
                        // Check bounds
                        if (newValue >= input.min && newValue <= input.max) {
                          input.value = newValue;
                          updatePositionDisplay(newValue);
                          checkPositionAvailability();
                        }
                      }
                      
                      // Update the position display
                      function updatePositionDisplay(value) {
                        document.getElementById('position-display').textContent = value;
                      }
                    </script>
                  </div>
                </div>
                
                <div class="sm:w-1/3">
                  <%= form.submit "Add to Rack", id: "add-button", class: "w-full bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded shadow-sm disabled:opacity-50 disabled:cursor-not-allowed" %>
                </div>
              <% end %>
            </div>
            
            <div id="available-positions" class="hidden mb-2">
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Available positions:
              </label>
              <div class="flex flex-wrap gap-1" id="position-buttons"></div>
            </div>
          </div>
          
          <script>
            document.addEventListener('DOMContentLoaded', function() {
              const searchInput = document.getElementById('component-search');
              const componentItems = document.querySelectorAll('.component-item');
              const noResultsMessage = document.getElementById('no-results-message');
              const positionSelector = document.getElementById('position-selector');
              const availablePositions = document.getElementById('available-positions');
              const positionButtons = document.getElementById('position-buttons');
              const positionInput = document.getElementById('position-input');
              const positionStatus = document.getElementById('position-status');
              const positionIndicator = document.getElementById('position-indicator');
              const addButton = document.getElementById('add-button');
              const rackHeight = <%= @server_rack.height %>;
              
              // Handle search functionality
              searchInput.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase().trim();
                let visibleCount = 0;
                
                componentItems.forEach(item => {
                  const componentName = item.dataset.name;
                  const isVisible = componentName.includes(searchTerm);
                  
                  item.style.display = isVisible ? 'block' : 'none';
                  
                  if (isVisible) {
                    visibleCount++;
                  }
                });
                
                // Toggle no results message
                noResultsMessage.style.display = visibleCount === 0 ? 'block' : 'none';
              });
              
              // Check position availability when position changes
              positionInput.addEventListener('input', function() {
                checkPositionAvailability();
              });
            });
            
            // Global variables to track current component
            let currentComponentId = null;
            let currentComponentHeight = 0;
            let availablePositionsArray = [];
            
            function selectComponent(element) {
              // Get component data from clicked element
              const componentId = element.dataset.id;
              const componentName = element.querySelector('h4').innerText;
              const componentDetails = element.querySelector('p').innerText;
              const componentHeight = parseInt(element.dataset.height);
              const colorDiv = element.querySelector('div.rounded-full').cloneNode(true);
              
              // Update hidden form field
              document.getElementById('selected-component-id').value = componentId;
              
              // Update component display
              document.getElementById('selected-component-name').innerText = componentName;
              document.getElementById('selected-component-details').innerText = componentDetails;
              
              // Update color indicator
              const colorIndicator = document.getElementById('selected-component-color');
              colorIndicator.className = colorDiv.className;
              
              // Show position selector
              document.getElementById('position-selector').classList.remove('hidden');
              
              // Store current component data
              currentComponentId = componentId;
              currentComponentHeight = componentHeight;
              
              // Initialize position input
              const positionInput = document.getElementById('position-input');
              positionInput.max = <%= @server_rack.height %> - componentHeight + 1;
              positionInput.value = 1;
              
              // Check position availability
              checkPositionAvailability();
              
              // Highlight selected item and unhighlight others
              document.querySelectorAll('.component-item').forEach(item => {
                item.classList.remove('bg-blue-50', 'dark:bg-blue-900/30');
              });
              element.classList.add('bg-blue-50', 'dark:bg-blue-900/30');
            }
            
            function checkPositionAvailability() {
              if (!currentComponentId || !currentComponentHeight) return;
              
              const position = parseInt(document.getElementById('position-input').value);
              const rackHeight = <%= @server_rack.height %>;
              const endPosition = position + currentComponentHeight - 1;
              
              // Check if position is within bounds
              if (position < 1 || endPosition > rackHeight) {
                setPositionStatus('invalid', 'Position out of bounds');
                return;
              }
              
              // Make an AJAX request to check if position is available
              fetch(`<%= server_rack_path(@server_rack) %>/check_position?component_id=${currentComponentId}&position=${position}`)
                .then(response => response.json())
                .then(data => {
                  if (data.available) {
                    setPositionStatus('valid', 'Position available');
                    
                    // Show position range
                    document.getElementById('position-indicator').innerText = 
                      currentComponentHeight > 1 ? `(spans to ${endPosition}U)` : '';
                    
                  } else {
                    setPositionStatus('invalid', data.message || 'Position not available');
                  }
                });
            }
            
            function setPositionStatus(status, message) {
              const positionStatus = document.getElementById('position-status');
              const addButton = document.getElementById('add-button');
              const positionBar = document.getElementById('available-positions-bar');
              const positionDisplay = document.getElementById('position-display');
              const controlContainer = positionDisplay.closest('.relative').parentElement;
              
              if (status === 'valid') {
                // Set classes for valid state
                positionStatus.className = 'flex items-center py-1 px-2 text-sm text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-900/30 border border-green-200 dark:border-green-800 rounded-md mb-2 transition-all duration-200';
                positionStatus.innerHTML = `
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                  </svg>
                  ${message}
                `;
                // Enable the add button
                addButton.disabled = false;
                
                // Update position display
                positionDisplay.classList.remove('text-red-500');
                positionDisplay.classList.add('text-green-500');
                
                // Add green border indication to the control container
                controlContainer.classList.remove('border-red-500');
                controlContainer.classList.add('border-green-500');
                
                // Update position bar
                positionBar.style.width = '100%';
                positionBar.classList.remove('bg-red-500');
                positionBar.classList.add('bg-green-500');
                
              } else {
                // Set classes for invalid state
                positionStatus.className = 'flex items-center py-1 px-2 text-sm text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-800 rounded-md mb-2 transition-all duration-200';
                positionStatus.innerHTML = `
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                  ${message}
                `;
                // Disable the add button
                addButton.disabled = true;
                
                // Update position display
                positionDisplay.classList.remove('text-green-500');
                positionDisplay.classList.add('text-red-500');
                
                // Add red border indication to the control container
                controlContainer.classList.remove('border-green-500');
                controlContainer.classList.add('border-red-500');
                
                // Update position bar (show 33% width for error)
                positionBar.style.width = '33%';
                positionBar.classList.remove('bg-green-500');
                positionBar.classList.add('bg-red-500');
              }
            }
          </script>
        <% else %>
          <p class="text-gray-500">No components available. <%= link_to "Create a component", new_component_path, class: "text-blue-500 hover:underline" %></p>
        <% end %>
      </div>
    </div>
  </div>
</div>
